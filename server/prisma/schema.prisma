// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String   @default("intern")
  completed     Boolean  @default(false)
  createdAt     DateTime
  updatedAt     DateTime

  sessions Session[]
  accounts Account[]
  company  Company?
  intern   Intern?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime

  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?

  accountId    String
  providerId   String
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  scope        String?
  password     String?

  @@map("account")
}

model Verification {
  id        String    @id
  createdAt DateTime?
  updatedAt DateTime?
  expiresAt DateTime

  identifier String
  value      String

  @@map("verification")
}

model Company {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name                String
  industry            String
  image               String?
  description         String
  size                String
  year                Int
  contactEmail        String
  phone               String?
  website             String?
  headQuarter         String
  additionalLocations String?
  values              String?

  jobs        Job[]
  application Application[]
  intern Intern[]

  @@map("company")
}

enum InternStatus {
  active
  terminated
}

model Intern {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  dateOfBirth String
  image       String?
  gender      String
  country     String

  degree           String
  university       String?
  major            String?
  yearOfGraduation String?
  GPA              Decimal?

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  jobId    String?
  job      Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  startDate DateTime?
  endDate   DateTime?
  status    InternStatus? @default(active)

 
  application Application[]
  interview    Interview[]

  about     String
  resume    String?
  linkdin   String?
  github    String?
  portfolio String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("intern")
}

enum JobType {
  remote
  onsite
  hybrid
}

model Job {
  id        String    @id @default(cuid())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  title     String
  type      JobType
  location  String
  salary    String
  duration  String
  startDate DateTime?
  deadline  DateTime?

  description      String
  responsibilities String
  requirements     String
  benefits         String

  application Application[]
  interview   Interview[]
  intern Intern[]

  status    String   @default("active")
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job")
}


enum ApplicationStatus {
  under_review
  interview
  accepted
  rejected
}

model Application {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resume      String?
  coverLetter String
 
  jobId String
  companyId String
  internId String
  status ApplicationStatus? @default(under_review)


  job       Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  intern   Intern @relation(fields: [internId], references: [id], onDelete: Cascade)

 @@unique([jobId, internId])
  @@map("application")
}



model Interview {
  id          String        @id @default(cuid())
  
  jobId       String
  job         Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  internId String
  intern   Intern       @relation(fields: [internId], references: [id], onDelete: Cascade)
  
  date        DateTime
  
  type        String?
  
  location    String?   
  duration    String?   
  link        String?   
  
  confirmed   Boolean?       @default(false)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("interview")
}

