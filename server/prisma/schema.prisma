// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id

  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String @default("intern")
  completed     Boolean @default(false)
  createdAt     DateTime
  updatedAt     DateTime

  sessions Session[]
  accounts Account[]
  company  Company?
  intern   Intern?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime

  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?

  accountId    String
  providerId   String
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  scope        String?
  password     String?

  @@map("account")
}


model Verification {
  id        String    @id
  createdAt DateTime?
  updatedAt DateTime?
  expiresAt DateTime

  identifier String
  value      String

  @@map("verification")
}

model Company {
  id        String     @id @default(uuid())
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name                String
  industry            String
  image               String?
  description         String
  size                String
  year                Int
  contactEmail       String  
  phone               String?
  website             String?
  headQuarter         String
  additionalLocations String?
  values              String?

  jobs Job[]

  @@map("company")
}

model Intern {
  id        String    @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// "name", "dateOfBirth", "gender", "country"
  name                String
  dateOfBirth         String
  image               String?
  gender              String
  country             String

  degree              String
  university          String?
  major               String?
  yearOfGraduation    String?
  GPA                 Decimal?

  about               String
  resume              String?
  linkdin             String?
  github              String?
  portfolio           String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("intern")
}

enum JobType {
  REMOTE
  ONSITE
  HYBRID
}

model Job {
  id               String   @id @default(cuid())
  companyId        String   @unique
  company          Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  title            String
  type             String
  location         String
  salary           String
  duration         String
  startDate        DateTime?
  deadline         DateTime?

  description      String
  responsibilities String
  requirements     String
  benefits         String

  status           String  @default("Active")
  views            Int     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("job")
}
