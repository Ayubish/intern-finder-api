// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String @default("intern")
  completed     Boolean @default(false)

  sessions Session[]
  accounts Account[]
  company  Company[]
  intern   Intern[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime

  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?

  accountId    String
  providerId   String
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  scope        String?
  password     String?

  @@map("account")
}


model Verification {
  id        String    @id
  createdAt DateTime?
  updatedAt DateTime?
  expiresAt DateTime

  identifier String
  value      String

  @@map("verification")
}

model Company {
  id        String     @id @default(uuid())
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name                String
  industry            String
  image               String?
  description         String
  size                String
  year                Int
  contactEmail       String  
  phone               String?
  website             String?
  headQuarter         String
  additionalLocations String?
  values              String?

  @@map("company")
}

model Intern {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// "name", "dateOfBirth", "gender", "country"
  name                String
  dateOfBirth         String
  image               String?
  gender              String
  country             String

  degree              String
  university          String?
  major               String?
  yearOfGraduation    String?
  GPA                 Decimal?

  about               String
  resume              String?
  linkdin             String?
  github              String?
  portfolio           String?

  @@map("intern")
}
model Post {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  title                    String?
  description              String?
  deadline                 DateTime?
  startDate                DateTime?
  duration                 String?
  location                 String?
  commitment               String? 
  isPaid                  String? 
  qualifications  String?
  requirements             String?
  whoCanApply             String?
  educationLevel           String?
  perks                    String?

  @@map("post")
}